// 1. From the following tables write a SQL query to find the salesperson and customer who reside in the same city. 
      Return Salesman, cust_name and city.

answer      
      select Salesman.namee as "salesman", Customer.customer_name, Customer.city
      from Salesman, Customer
      where Salesman.city = Customer.city;
      
// 2. From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000. 
	Return ord_no, purch_amt, cust_name, city.

answer 
	
	select orders.ord_no, orders.purch_amt, customer.cust_name, customer.city
	from orders, customers
	where orders.customer_id = customer.customer_id
	and orders.purch_amt between 500 and 2000;
	
// 3. From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents. 
      Return Customer Name, city, Salesman, commission.

answer 
	select customer.customer_name, customer.city, salesman.namee, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_i
	
// 4. From the following tables write a SQL query to find salespeople who received commissions of more than 12 percent from the company. 
	Return Customer Name, customer city, Salesman, commission.
	
	
answer 
	select customer.customer_name, customer.city, salesman.namee, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	where salesman.commission > 0.12
	
	
// 5. 	From the following tables write a SQL query to locate those salespeople who do not live in the same city 
	where their customers live and have received a commission of more than 12% from the company. 
	Return Customer Name, customer city, Salesman, salesman city, commission.


answer 

	select customer.customer_name, customer.city, salesman.namee, salesman.city, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	where customer.city <> salesman.city
	and salesman.commission > 0.12	
	
// 6. 	From the following tables write a SQL query to find the details of an order. 
	Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.
	
	
answer 
	
	select orders.order_no, orders.order_date, orders.purch_amt, customer.customer_name, customer.grade, salesman.namee, salesman.commission
	from orders 
	join customer 
	on orders.customer_id = customer.customer_id
	join salesman
	on customer.salesman_id = salesman.salesman_id
	
	
// 7. 	Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the 
	relational rows are returned.
	
answer

	select *
	from orders
	natural join customer
	natural join salesman;	
	
// 8. 	From the following tables write a SQL query to display the customer name, customer city, grade, salesman, salesman city. 
	The results should be sorted by ascending customer_id.
	
	
answer 
	
	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	order by customer.customer_id
	
	
// 9. 	From the following tables write a SQL query to find those customers with a grade less than 300. 
	Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id.
	
	
answer 
	
	
	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	left outer join salesman
	on customer.salesman_id = salesman.salesman_id
	where customer.grade < 300
	order by customer.customer_id 
	
// 10. 	Write a SQL statement to make a report with customer name, city, order number, order date, 
	and order amount in ascending order according to the order date to determine whether any of the 
	existing customers have placed an order or not.
	
	
answer  

	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	left outer join orders
	on orders.customer_id = customer.customer_id
	order by orders.order_date 
	
	
// 11. 	SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to 
	determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves.


answer
	
	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt, salesman.namee, salesman.commission
	from customer
	left outer join orders
	on customer.customer_id = orders.customer_id
	left outer join salesman
	on salesman.salesman_id = orders.salesman_id
	//order by orders.purch_amt
	
	
	
// 12. 	Write a SQL statement to generate a list in ascending order of salespersons who work either for one or 
	more customers or have not yet joined any of the customers.


answer 

	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	right outer join salesman
	on customer.salesman_id = salesman.salesman_id
	order by customer.salesman_id
	
	
	
	
	
	
	
	
	
	
	
