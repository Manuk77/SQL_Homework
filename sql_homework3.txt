// 1. From the following tables write a SQL query to find the salesperson and customer who reside in the same city. 
      Return Salesman, cust_name and city.

answer      
      select Salesman.namee as "salesman", Customer.customer_name, Customer.city
      from Salesman, Customer
      where Salesman.city = Customer.city;
      
// 2. From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000. 
	Return ord_no, purch_amt, cust_name, city.

answer 
	
	select orders.ord_no, orders.purch_amt, customer.cust_name, customer.city
	from orders, customers
	where orders.customer_id = customer.customer_id
	and orders.purch_amt between 500 and 2000;
	
// 3. From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents. 
      Return Customer Name, city, Salesman, commission.

answer 
	select customer.customer_name, customer.city, salesman.namee, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_i
	
// 4. From the following tables write a SQL query to find salespeople who received commissions of more than 12 percent from the company. 
	Return Customer Name, customer city, Salesman, commission.
	
	
answer 
	select customer.customer_name, customer.city, salesman.namee, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	where salesman.commission > 0.12
	
	
// 5. 	From the following tables write a SQL query to locate those salespeople who do not live in the same city 
	where their customers live and have received a commission of more than 12% from the company. 
	Return Customer Name, customer city, Salesman, salesman city, commission.


answer 

	select customer.customer_name, customer.city, salesman.namee, salesman.city, salesman.commission
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	where customer.city <> salesman.city
	and salesman.commission > 0.12	
	
// 6. 	From the following tables write a SQL query to find the details of an order. 
	Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.
	
	
answer 
	
	select orders.order_no, orders.order_date, orders.purch_amt, customer.customer_name, customer.grade, salesman.namee, salesman.commission
	from orders 
	join customer 
	on orders.customer_id = customer.customer_id
	join salesman
	on customer.salesman_id = salesman.salesman_id
	
	
// 7. 	Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the 
	relational rows are returned.
	
answer

	select *
	from orders
	natural join customer
	natural join salesman;	
	
// 8. 	From the following tables write a SQL query to display the customer name, customer city, grade, salesman, salesman city. 
	The results should be sorted by ascending customer_id.
	
	
answer 
	
	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	join salesman
	on customer.salesman_id = salesman.salesman_id
	order by customer.customer_id
	
	
// 9. 	From the following tables write a SQL query to find those customers with a grade less than 300. 
	Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id.
	
	
answer 
	
	
	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	left outer join salesman
	on customer.salesman_id = salesman.salesman_id
	where customer.grade < 300
	order by customer.customer_id 
	
// 10. 	Write a SQL statement to make a report with customer name, city, order number, order date, 
	and order amount in ascending order according to the order date to determine whether any of the 
	existing customers have placed an order or not.
	
	
answer  

	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	left outer join orders
	on orders.customer_id = customer.customer_id
	order by orders.order_date 
	
	
// 11. 	SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to 
	determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves.


answer
	
	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt, salesman.namee, salesman.commission
	from customer
	left outer join orders
	on customer.customer_id = orders.customer_id
	left outer join salesman
	on salesman.salesman_id = orders.salesman_id
	//order by orders.purch_amt
	
	
	
// 12. 	Write a SQL statement to generate a list in ascending order of salespersons who work either for one or 
	more customers or have not yet joined any of the customers.


answer 

	select customer.customer_name, customer.city, customer.grade, salesman.namee, salesman.city
	from customer
	right outer join salesman
	on customer.salesman_id = salesman.salesman_id
	order by customer.salesman_id
	
	
	
// 13. 	From the following tables write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount. 
	Condition for selecting list of salesmen : 1. Salesmen who works for one or more customer or, 2. Salesmen who not yet join under any 
	customer, Condition for selecting list of customer : 3. placed one or more orders, or 4. no order placed to their salesman.


answer 


	select customer.customer_name, customer.city, customer.grade, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	right outer join salesman
	on customer.salesman_id = salesman.salesman_id
	right outer join orders
	on orders.customer_id = customer.customer_id
	
	
// 14. 	Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customer. The 
	customer, may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any 
	order to the associated supplier.



answer


	select customer.customer_name, customer.city, customer.grade, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	right outer join salesman
	on customer.salesman_id = salesman.salesman_id
	right outer join orders
	on orders.customer_id = customer.customer_id
	where orders.purch_amt >= 2000
	and customer.grade is not null;
	
	
	
// 15. 	For those customers from the existing list who put one or more orders, or which orders have been placed by the customer who is not on the 
	list, create a report containing the customer name, city, order number, order date, and purchase amount


answer 

	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	left outer join orders
	on customer.customer_id = orders.customer_id
	
	
	
// 16. 	Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on 
	the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list 
	nor has a grade.
	

answer  


	select customer.customer_name, customer.city, orders.order_no, orders.order_date, orders.purch_amt
	from customer
	left outer join orders
	on customer.customer_id = orders.customer_id
	where customer.grade is not null



// 17.  Write a SQL query to combine each row of the salesman table with each row of the customer table.


answer

	select *
	from salesman
	cross join customer


// 18. 	Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers 
	and vice versa for that salesperson who belongs to that city.



answer  

	select * 
	from salesman
	cross join customer
	where salesman.city = customer.city



// 19. 	Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer 
	and vice versa for those salesmen who belong to a city and customers who require a grade.


answer   

	select * 
	from salesman
	cross join customer
	where salesman.city = customer.city
	and customer.grade is not null






// 20.  Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice 
	versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade.


answer  
	select * 
	from salesman
	cross join customer
	where salesman.city <> customer.city
	and customer.grade is not null	



// 21. 	From the following tables write a SQL query to select all rows from both participating tables as long as there is a match between pro_com 
	and com_id.

answer 
	
	select * 
	from item_mast
	inner join company_mast
	on item_mast.pro_com = company_mast.com_id


// 22. Write a SQL query to display the item name, price, and company name of all the products.


answer 

	select c.com_name, i.pro_name, i.pro_price
	from item_mast i
	inner join company_mast c
	on i.pro_com = c.com_id



// 23. From the following tables write a SQL query to calculate the average price of items of each company. Return average value and company name.


answer 

	select c.com_name, avg(i.pro_price) as "Average price"
	from item_mast i
	inner join company_mast c
	on i.pro_com = c.com_id
	group by c.com_name
	order by "Average price"


// 24. 	From the following tables write a SQL query to calculate and find the average price of items of each company higher than or equal to Rs. 
	350. Return average value and company name.


answer

	select c.com_name, avg(i.pro_price) as "Average price"
	from item_mast i
	inner join company_mast c
	on i.pro_com = c.com_id
	group by c.com_name
	having avg(i.pro_price) >= 350
	order by "Average price"
	


// 25. 	From the following tables write a SQL query to find the most expensive product of each company. Return pro_name, pro_price and com_name.



answer 
		
		
	select i.pro_name, i.pro_price, c.com_name
	from item_mast i
	inner join company_mast c
	on i.pro_com = c.com_id
	and i.pro_price = 
	(
	select max(i.pro_price)
	from item_mast i
	where i.pro_com = c.com_id
	)
	order by i.pro_price




// 26. 	From the following tables write a SQL query to display all the data of employees including their department.


answer 
	
	select  e.*, d.*
	from emp_details e
	inner join emp_department d
	on e.emp_dept = d.dpt_code


// 27. 	From the following tables write a SQL query to display the first and last names of each employee, as well as the department name and 
	sanction amount.


answer	

	select e.emp_fname, e.emp_lname, d.dpt_name, d.dpt_allotment
	from emp_details e
	inner join emp_department d
	on e.emp_dept = d.dpt_code
	order by d.dpt_allotmen



// 28.	From the following tables write a SQL query to find the departments with budgets more than Rs. 50000 and display the first name and last 
	name of employees.


answer 
	
	select e.emp_fname, e.emp_lname
	from emp_details e
	inner join emp_department d
	on e.emp_dept = d.dpt_code
	and d.dpt_allotment > 50000
	
	
	
// 29. From the following tables write a SQL query to find the names of departments where more than two employees are employed. Return dpt_name	
	
	
answer 


	select d.dpt_name
	from emp_details e
	inner join emp_department d
	on e.emp_dept = d.dpt_code
	group by d.dpt_name
	having count(*) > 2
	
	
	
	
	
	
	
	
	
	
	
	
